#include <iostream>
#include <vector>

using namespace std;

const int SIZE = 4;

// Function prototypes
void printBoard(const vector<vector<int>>& board);
bool isSafe(const vector<vector<int>>& board, int row, int col, int num);
bool solveSudoku(vector<vector<int>>& board);

int main() {
    vector<vector<int>> board(SIZE, vector<int>(SIZE, 0));

    cout << "Enter the Sudoku puzzle (use 0 for empty cells):\n";
    for (int i = 0; i < SIZE; ++i) {
        for (int j = 0; j < SIZE; ++j) {
            cin >> board[i][j];
        }
    }

    cout << "Input Sudoku Puzzle:\n";
    printBoard(board);

    if (solveSudoku(board)) {
        cout << "Solved Sudoku Puzzle:\n";
        printBoard(board);
    } else {
        cout << "No solution exists!\n";
    }

    return 0;
}

void printBoard(const vector<vector<int>>& board) {
    for (const auto& row : board) {
        for (int num : row) {
            cout << num << " ";
        }
        cout << endl;
    }
}

bool isSafe(const vector<vector<int>>& board, int row, int col, int num) {
    // Check the row and column
    for (int x = 0; x < SIZE; ++x) {
        if (board[row][x] == num || board[x][col] == num) {
            return false;
        }
    }
    // Check the 3x3 box
    int boxRowStart = row - row % 3;
    int boxColStart = col - col % 3;
    for (int r = 0; r < 3; ++r) {
        for (int c = 0; c < 3; ++c) {
            if (board[boxRowStart + r][boxColStart + c] == num) {
                return false;
            }
        }
    }
    return true;
}

bool solveSudoku(vector<vector<int>>& board) {
    for (int row = 0; row < SIZE; ++row) {
        for (int col = 0; col < SIZE; ++col) {
            if (board[row][col] == 0) {
                for (int num = 1; num <= SIZE; ++num) {
                    if (isSafe(board, row, col, num)) {
                        board[row][col] = num;
                        if (solveSudoku(board)) {
                            return true;
                        }
                        board[row][col] = 0; // Backtrack
                    }
                }
                return false; // No number can be placed
            }
        }
    }
    return true; // Puzzle solved
}
